use std::net::IpAddr;
use serde_derive::{Deserialize, Serialize};

#[derive(Debug, PartialOrd, PartialEq, Serialize, Deserialize)]
pub struct Common {
    bind_addr: IpAddr,
    bind_port: u16,
    bind_udp_port: u16,
    kcp_bind_port: u16,
    vhost_http_port: u16,
    vhost_https_port: u16,
    vhost_http_timeout: u16,
    tcpmux_httpconnect_port: u16,
    dashboard_addr: IpAddr,
    dashboard_port: u16,
    dashboard_user: String,
    dashboard_pwd: String,
    enable_prometheus: bool,
    assets_dir: String,
    log_file: String,
    log_level: String,
    log_max_days: u16,
    disable_log_color: bool,
    detailed_errors_to_client: bool,
    authentication_method: String,
    authenticate_heartbeats: bool,
    authenticate_new_work_conns: bool,
    token: String,
    oidc_issuer: String,
    oidc_audience: String,
    oidc_skip_expiry_check: bool,
    oidc_skip_issuer_check: bool,
    heartbeat_timeout: u16,
    user_conn_timeout: u16,
    allow_ports: String,
    max_pool_count: u8,
    max_ports_per_client: u8,
    tls_only: bool,
    tls_cert_file: String,
    tls_key_file: String,
    tls_trusted_ca_file: String,
    subdomain_host: String,
    tcp_mux: bool,
    udp_packet_size: u32
}